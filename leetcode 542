// https://leetcode.com/problems/01-matrix/


class Solution {
    int [][]dp;
    public int[][] updateMatrix(int[][] mat) {
        if(mat == null || mat.length == 0 || mat[0].length == 0)
            return new int[0][0];
        int n = mat.length, m = mat[0].length;   
        dp = new int[n][m];
        for(int i = 0; i < n ; i++){
            for(int j = 0 ; j < m ;j++){
                if(mat[i][j] != 0)
                  mat[i][j] = 10000;// init for non zero values      
            }
        }
        for(int i = 0; i < n ; i++){
            for(int j = 0 ; j < m ;j++){
                if(mat[i][j] == 0 || (i==0 && j==0)) continue;
                if(i== 0)
                   mat[i][j] = mat[i][j-1] + 1; 
                else if(j == 0)
                    mat[i][j] = mat[i-1][j] + 1;
                else
                    mat[i][j] = Math.min(mat[i-1][j]+1, mat[i][j-1]+1);
            }
        }
        for(int i = n-1; i >= 0 ; i--){
            for(int j = m-1 ; j >= 0 ; j--){
                if(mat[i][j] == 0 || (i==n-1 && j==m-1)) continue;
                if(i == n-1)
                   mat[i][j] = Math.min(mat[i][j],mat[i][j+1] + 1); 
                else if(j == m-1)
                    mat[i][j] = Math.min(mat[i][j],mat[i+1][j] + 1);
                else{
                    int x = Math.min(mat[i+1][j]+1, mat[i][j+1]+1);
                    mat[i][j] = Math.min(mat[i][j],x);
                }
            }
        }
        return mat;
    }
}
/*
[[1,1,0,0,1,0,0,1,1,0],[1,0,0,1,0,1,1,1,1,1],[1,1,1,0,0,1,1,1,1,0],[0,1,1,1,0,1,1,1,1,1],[0,0,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,0,1,1,1],[0,1,1,1,1,1,1,0,0,1],[1,1,1,1,1,0,0,1,1,1],[0,1,0,1,1,0,1,1,1,1],[1,1,1,0,1,0,1,1,1,1]]
*/

// class Solution {
//     int [][]a = null;
//     int n = 0,m = 0;
//     public int[][] updateMatrix(int[][] mat) {
//         int n = 0,m = 0;
//         if(mat == null || (n = mat.length) == 0 || (m = mat[0].length) == 0)
//             return mat;
//         a = mat;
//         this.n = n;
//         this.m = m;
//         for(int i = 0 ; i < n ; i++){
//             for(int j = 0 ; j < m ; j++){
//                 if(a[i][j] == 1){
//                     a[i][j] = bfs(i,j);
//                 }
//             }
//         }
//         return mat;
//     }
//     int bfs(int x,int y){//p("call : "+x+" "+y);
//         boolean [][]visited = new boolean[n][m];
//         Queue<Node> q = new LinkedList();
//         q.add(new Node(x,y,0));
//         while(!q.isEmpty()){
//             Node p = q.poll();
//             x = p.x;
//             y = p.y; //p("pts : "+x+" "+y);
//             if(a[x][y] == 0)
//                 return p.step;
//             visited[x][y] = true;
//             int dx[] = {0,0,1,-1};
//             int dy[] = {1,-1,0,0};
//             for(int i = 0 ; i < 4 ; i++){
//                 int new_x = x + dx[i];
//                 int new_y = y + dy[i];
//                 if(new_x >= 0 && new_x < n && new_y >=0 && new_y < m && !visited[new_x][new_y]){
//                     q.add(new Node(new_x,new_y,p.step + 1));
//                 }
//             } 
//         }
//         return 0;
//     }
//     class Node{
//         int x,y,step;
//         Node(int a,int b,int c){
//             x = a;
//             y = b;
//             step = c;
//         }
//     }
//     void p(String s){
//         System.out.println(s);
//     }
// }

// multi headed bfs
// class Solution {
//     public int[][] updateMatrix(int[][] a) {
//         int n = 0,m = 0;
//         if(a == null || (n = a.length) == 0 || (m = a[0].length) == 0)
//             return a;
//         boolean visited[][] = new boolean[n][m];
//         Queue<Node>q = new LinkedList();
//         for(int i = 0 ; i < n ; i++){
//             for(int j = 0 ; j < m ; j++){
//                 if(a[i][j] == 0){
//                     visited[i][j] = true;
//                     q.add(new Node(i,j));
//                 }
//             }
//         }
//         int dx[] = {0,0,1,-1};
//         int dy[] = {1,-1,0,0};
//         while(!q.isEmpty()){
//             Node p = q.poll();
//             for(int i = 0 ; i < 4 ; i++){
//                 int new_x = p.x + dx[i];
//                 int new_y = p.y + dy[i];
//                 if(new_x >= 0 && new_x < n && new_y >=0 && new_y < m && !visited[new_x][new_y]){
//                     visited[new_x][new_y] = true;
//                     a[new_x][new_y] = a[p.x][p.y] + 1;
//                     q.add(new Node(new_x,new_y));
//                 }
//             }  
//         }
//         return a;
//     }
//     class Node{
//         int x,y;
//         Node(int a,int b){
//             x = a;
//             y = b;
//         }
//     }
//     void p(String s){
//         System.out.println(s);
//     }
// }
